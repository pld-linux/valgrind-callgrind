diff -ruN callgrind./configure.in callgrind/configure.in
--- callgrind./configure.in	2004-07-26 21:28:46.000000000 +0200
+++ callgrind/configure.in	2004-08-10 21:24:36.718311640 +0200
@@ -8,10 +8,10 @@
 # set default PREFIX to existing valgrind installation
 AC_MSG_CHECKING([for valgrind installation])
 vg_exec=`which valgrind`
-if test "x$vg_exec" = "x"; then
-  AC_MSG_RESULT([not found in PATH])
-  AC_MSG_ERROR([Needs Valgrind >= Snapshot-20030725 (2.0.x,2.1.0 is fine)])
-fi
+#if test "x$vg_exec" = "x"; then
+#  AC_MSG_RESULT([not found in PATH])
+#  AC_MSG_ERROR([Needs Valgrind >= Snapshot-20030725 (2.0.x,2.1.0 is fine)])
+#fi
 vg_binpath=`dirname $vg_exec`
 ac_default_prefix=`dirname $vg_binpath`
 AC_MSG_RESULT([in ${ac_default_prefix}])
@@ -35,41 +35,41 @@
 AC_SUBST(CT_INCDIR)
 
 # check if there is a vg_skin.h installed
-AC_MSG_CHECKING([if vg_skin.h is available])
-CFLAGS="-I $VG_INCDIR"
-AC_TRY_COMPILE(, [
+#AC_MSG_CHECKING([if vg_skin.h is available])
+#CFLAGS="-I $VG_INCDIR"
+#AC_TRY_COMPILE(, [
 #include "vg_skin.h"
-int main() { return 0 ; }
-],
-[
+#int main() { return 0 ; }
+#],
+#[
 # No need for additional directory
-CT_INCDIR=""
-AC_MSG_RESULT([Yes])
-], [
-AC_MSG_ERROR([No. Needs header files from Valgrind >= Snapshot-20030725 (2.0.x,2.1.0 is fine).
-Perhaps there is a missing valgrind-dev package in your distribution?])
-])
+#CT_INCDIR=""
+#AC_MSG_RESULT([Yes])
+#], [
+#AC_MSG_ERROR([No. Needs header files from Valgrind >= Snapshot-20030725 (2.0.x,2.1.0 is fine).
+#Perhaps there is a missing valgrind-dev package in your distribution?])
+#])
 
 # Check for Valgrind version
 AC_SUBST(CT_OPTIONS)
 AC_MSG_CHECKING([for valgrind version])
-vg_version=`valgrind --version`
-case "${vg_version}" in
-    valgrind-2.0.*)
-	AC_MSG_RESULT([${vg_version} (stable)])
-	CT_OPTIONS="--skin=callgrind"
-	;;
-    valgrind-2.1.*)
+#vg_version=`valgrind --version`
+#case "${vg_version}" in
+#    valgrind-2.0.*)
+#	AC_MSG_RESULT([${vg_version} (stable)])
+#	CT_OPTIONS="--skin=callgrind"
+#	;;
+#    valgrind-2.1.*)
 	AC_MSG_RESULT([${vg_version} (unstable)])
 	AC_DEFINE(VG_UNSTABLE,1,[Unstable Valgrind])
         vg_unstable="yes"
 	CT_OPTIONS="--tool=callgrind"
-	;;
-    *)
-	AC_MSG_RESULT([${vg_version}])
-	CT_OPTIONS="--tool=callgrind"
-	;;
-esac
+#	;;
+#    *)
+#	AC_MSG_RESULT([${vg_version}])
+#	CT_OPTIONS="--tool=callgrind"
+#	;;
+#esac
 
 # check if we support skin version of installed valgrind
 #
@@ -77,31 +77,31 @@
 # are *not* reliable, so we define UNSTABLE to distinguish
 # unstable VG releases from stable ones reusing versions.
 
-AC_MSG_CHECKING([if skin version is supported])
-CFLAGS="-I $VG_INCDIR"
-if test "x$vg_unstable" = "x"; then
-	AC_TRY_RUN([
-	#include "vg_skin.h"
-	int main() { return (VG_CORE_INTERFACE_MAJOR_VERSION > 5) ? 1:0; }
-	], [
-	AC_MSG_RESULT([Yes])
-	], [
-	AC_MSG_ERROR([The installed stable Valgrind is too new for this package. Please update this package!])
-	], [
-	AC_MSG_RESULT([Assuming yes (cross-compiling)])
-	])
-else
-	AC_TRY_RUN([
-	#include "vg_skin.h"
-	int main() { return (VG_CORE_INTERFACE_MAJOR_VERSION > 6) ? 1:0; }
-	], [
-	AC_MSG_RESULT([Yes])
-	], [
-	AC_MSG_ERROR([The installed unstable Valgrind is too new for this package. Please update this package!])
-	], [
-	AC_MSG_RESULT([Assuming yes (cross-compiling)])
-	])
-fi
+#AC_MSG_CHECKING([if skin version is supported])
+#CFLAGS="-I $VG_INCDIR"
+#if test "x$vg_unstable" = "x"; then
+#	AC_TRY_RUN([
+#	#include "vg_skin.h"
+#	int main() { return (VG_CORE_INTERFACE_MAJOR_VERSION > 5) ? 1:0; }
+#	], [
+#	AC_MSG_RESULT([Yes])
+#	], [
+#	AC_MSG_ERROR([The installed stable Valgrind is too new for this package. Please update this package!])
+#	], [
+#	AC_MSG_RESULT([Assuming yes (cross-compiling)])
+#	])
+#else
+#	AC_TRY_RUN([
+#	#include "vg_skin.h"
+#	int main() { return (VG_CORE_INTERFACE_MAJOR_VERSION > 6) ? 1:0; }
+#	], [
+#	AC_MSG_RESULT([Yes])
+#	], [
+#	AC_MSG_ERROR([The installed unstable Valgrind is too new for this package. Please update this package!])
+#	], [
+#	AC_MSG_RESULT([Assuming yes (cross-compiling)])
+#	])
+#fi
 
 
 # copied from configure.in of valgrind distribution
